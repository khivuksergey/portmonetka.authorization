// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go
//
// Generated by this command:
//
//	mockgen -source=storage.go -destination=../../../adapter/storage/gorm/mock/mock_storage.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	repository "github.com/khivuksergey/portmonetka.authorization/internal/core/port/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockIDB is a mock of IDB interface.
type MockIDB struct {
	ctrl     *gomock.Controller
	recorder *MockIDBMockRecorder
}

// MockIDBMockRecorder is the mock recorder for MockIDB.
type MockIDBMockRecorder struct {
	mock *MockIDB
}

// NewMockIDB creates a new mock instance.
func NewMockIDB(ctrl *gomock.Controller) *MockIDB {
	mock := &MockIDB{ctrl: ctrl}
	mock.recorder = &MockIDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDB) EXPECT() *MockIDBMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIDB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIDB)(nil).Close))
}

// InitRepository mocks base method.
func (m *MockIDB) InitRepository() *repository.Manager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitRepository")
	ret0, _ := ret[0].(*repository.Manager)
	return ret0
}

// InitRepository indicates an expected call of InitRepository.
func (mr *MockIDBMockRecorder) InitRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitRepository", reflect.TypeOf((*MockIDB)(nil).InitRepository))
}
